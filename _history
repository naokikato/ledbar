{"entries":[{"timestamp":1728605268710,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"20\" y=\"20\""],[0,"></b"]],"start1":67,"start2":67,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":23,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"basic.forever(function () {\n\t\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":33,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".md\""],[-1,",\n        \"ledbar.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":217,"start2":217,"length1":66,"length2":44}]},{"type":"added","filename":"ledbar.ts","value":"/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\" block=\"LEDボタン\"\nnamespace IMLledbar {\n\n    const BUTTON_EVENT_ID = 1001\n    const BUTTON_PRESSED = 0\n    const BUTTON_RELEASED = 1\n    const BUTTON_TURNON = 1\n    const BUTTON_TURNOFF = 2\n    const LED_ON = 1\n    const LED_OFF = 0\n    let pressstatus = false\n    let beforetoggle = false\n    let buttonmode = ButtonMode.toggle;\n    let buttonpin = DigitalPin.P2\n    let ledpin = DigitalPin.P1\n\n\n    // LEDバーの制御ピンの設定\n    let dataPin = DigitalPin.P1\n    let clockPin = DigitalPin.P2\n\n    // LEDバーにデータを送信するための関数\n    function sendData(data: number) {\n        // スタートシーケンス\n        pins.digitalWritePin(dataPin, 0)\n        pins.digitalWritePin(clockPin, 0)\n\n        // データを1ビットずつ送信\n        for (let i = 0; i < 16; i++) {\n            let bit = (data & 0x8000) ? 1 : 0\n            pins.digitalWritePin(dataPin, bit)\n            pins.digitalWritePin(clockPin, 1)\n            control.waitMicros(10)\n            pins.digitalWritePin(clockPin, 0)\n            data = data << 1\n        }\n\n        // 終了シーケンス\n        pins.digitalWritePin(dataPin, 0)\n        pins.digitalWritePin(clockPin, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(clockPin, 0)\n    }\n\n    //% block=\"ピン設定 %pin\"\n    //% weight=100   \n    export function setomode(pin: DigitalPin) {\n        setpin(pin)\n    }\n\n    export function setLedBar(level: number) {\n        // LEDバーのレベルをデータとして設定（10ビットで管理）\n        let data = 0\n        for (let i = 0; i < level; i++) {\n            data = (data << 1) | 1\n        }\n        data = data << (10 - level) // 下位10ビットを使用するために左シフト\n\n        // データをLEDバーに送信\n        sendData(0x00)        // コマンド送信\n        sendData(data)        // LEDデータ送信\n        sendData(~data)       // 反転データ（LEDバー特有の仕様）\n    }\n\n\n    //% block=\"モード設定 %m %pin\"\n    //% weight=100   \n\n    //% block=\"押されている\"\n    //% weight=99   \n    export function ispush(): boolean {\n        return pressstatus\n    }\n\n    //% block=\"ONになっている\"\n    //% weight=98   \n    export function ison(): boolean {\n        return beforetoggle\n    }\n\n    //% block=\"OFFになっている\"\n    //% weight=97   \n    export function isoff(): boolean {\n        return !beforetoggle\n    }\n\n    function setpin(pin: DigitalPin) {\n        switch (pin) {\n            case DigitalPin.P1:\n                buttonpin = DigitalPin.P2\n                ledpin = DigitalPin.P1\n                break;\n            case DigitalPin.P0:\n                buttonpin = DigitalPin.P1\n                ledpin = DigitalPin.P0\n                break;\n            case DigitalPin.P2:\n                buttonpin = DigitalPin.P12\n                ledpin = DigitalPin.P2\n                break;\n            case DigitalPin.P15:\n                buttonpin = DigitalPin.P16\n                ledpin = DigitalPin.P15\n                break;\n        }\n    }\n\n    // ボタンが押されたときのイベントハンドラ\n    //% blockId=on_button_pressed block=\"ボタンが押されたとき\"\n    //% weight=80   \n    export function onButtonPressed(handler: () => void): void {\n        control.onEvent(BUTTON_EVENT_ID, BUTTON_PRESSED, handler)\n    }\n    // ボタンがONになったときのイベントハンドラ\n    //% blockId=turn_button_on block=\"ボタンがONになったとき\"\n    //% weight=79   \n    export function turnButtonOn(handler: () => void): void {\n        control.onEvent(BUTTON_EVENT_ID, BUTTON_TURNON, handler)\n    }\n    // ボタンがOFFになったときのイベントハンドラ\n    //% blockId=turn_button_off block=\"ボタンがOFFになったとき\"\n    //% weight=78   \n    export function turnButtonOff(handler: () => void): void {\n        control.onEvent(BUTTON_EVENT_ID, BUTTON_TURNOFF, handler)\n    }\n\n    basic.forever(function () {\n        /* control.inBackground(function() { */\n        if (pins.digitalReadPin(buttonpin) == BUTTON_PRESSED) {\n            if (pressstatus == false) {\n                /* 押された */\n                pressstatus = true\n            }\n        }\n        else {\n            if (pressstatus == true) {\n                /* 離された */\n                pressstatus = false\n\n                if (buttonmode == ButtonMode.toggle) {\n                    if (beforetoggle == false) {\n                        beforetoggle = true;\n                        pins.digitalWritePin(ledpin, LED_ON)\n                        // ONになったときにイベントを発生\n                        control.raiseEvent(BUTTON_EVENT_ID, BUTTON_TURNON)\n                    }\n                    else {\n                        beforetoggle = false;\n                        pins.digitalWritePin(ledpin, LED_OFF)\n                        // OFFになったときにイベントを発生\n                        control.raiseEvent(BUTTON_EVENT_ID, BUTTON_TURNOFF)\n                    }\n                }\n                else {\n                    // ボタンが押されたときにイベントを発生\n                    control.raiseEvent(BUTTON_EVENT_ID, BUTTON_PRESSED)\n                }\n            }\n        }\n        basic.pause(100)\n    })\n}\n"}]},{"timestamp":1728605854783,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"49\" y=\"52\"><statement name=\"HANDLER\"><block type=\"IMLledbar_setomode\"><field name=\"pin\">DigitalPin.P1</field></block></statement></block><block type=\"device_button_event\" x=\"265\" y=\"43\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"IMLledbar_setLedBar\"><value name=\"level\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value></block></statement"],[1,"20\" y=\"20\""],[0,"></b"]],"start1":104,"start2":104,"length1":399,"length2":18},{"diffs":[[0," x=\""],[-1,"191"],[1,"225"],[0,"\" y=\"2"],[-1,"68"],[1,"0"],[0,"\"></"]],"start1":155,"start2":155,"length1":19,"length2":18}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"input.onButtonPressed(Button.A, function () {\n    IMLledbar.setLedBar(5)\n})\nIMLledbar.setomode(DigitalPin.P1)\n"],[0,"basi"]],"start1":0,"start2":0,"length1":114,"length2":4}]},{"type":"edited","filename":"ledbar.ts","patch":[{"diffs":[[0,"ock=\"LED"],[-1,"バー"],[1,"ボタン"],[0,"\"\nnamesp"]],"start1":65,"start2":65,"length1":18,"length2":19},{"diffs":[[0,"    "],[-1,"// LEDバーの制御ピンの設定\n    let dataPin = DigitalPin.P1\n    let clockPin = DigitalPin.P2"],[1,"const BUTTON_EVENT_ID = 1001\n    const BUTTON_PRESSED = 0\n    const BUTTON_RELEASED = 1\n    const BUTTON_TURNON = 1\n    const BUTTON_TURNOFF = 2\n    const LED_ON = 1\n    const LED_OFF = 0\n    let pressstatus = false\n    let beforetoggle = false\n    let buttonmode = ButtonMode.toggle;\n    let buttonpin = DigitalPin.P2\n    let ledpin = DigitalPin.P1\n\n\n    // LEDバーの制御ピンの設定\n    let dataPin = DigitalPin.P1\n    let clockPin = DigitalPin.P2\n\n    // LEDバーにデータを送信するための関数\n    function sendData(data: number) {\n        // スタートシーケンス\n        pins.digitalWritePin(dataPin, 0)\n        pins.digitalWritePin(clockPin, 0)\n\n        // データを1ビットずつ送信\n        for (let i = 0; i < 16; i++) {\n            let bit = (data & 0x8000) ? 1 : 0\n            pins.digitalWritePin(dataPin, bit)\n            pins.digitalWritePin(clockPin, 1)\n            control.waitMicros(10)\n            pins.digitalWritePin(clockPin, 0)\n            data = data << 1\n        }\n\n        // 終了シーケンス\n        pins.digitalWritePin(dataPin, 0)\n        pins.digitalWritePin(clockPin, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(clockPin, 0)\n    }"],[0,"\n\n  "]],"start1":101,"start2":101,"length1":89,"length2":1120},{"diffs":[[0," }\n\n"],[-1,"    //% block=\"LED表示 %level\"\n    //% weight=100   \n"],[0,"    "]],"start1":1338,"start2":1338,"length1":59,"length2":8},{"diffs":[[0," }\n\n"],[1,"\n"],[0,"    //"],[-1," LEDバーにデータを送信するための関数\n    function sendData(data: number) {\n     "],[1,"% block=\"モード設定 %m %pin\"\n    //% weight=100   \n\n    //% block=\"押されている\"\n"],[0,"   "],[1," "],[0,"//"],[-1," スタートシーケンス\n"],[1,"% weight=99"],[0,"   "],[1,"\n"],[0,"    "],[-1," pins.digitalWritePin(dataPin, 0)\n        pins.digitalWritePin(clockPin, 0)\n"],[1,"export function ispush(): boolean {\n        return pressstatus"],[0,"\n    "],[1,"}\n\n"],[0,"    //"],[-1," データを1ビットずつ送信\n        for (let i = 0; i < 16; i++) {\n            let bit = (data & 0x8000) ? 1 : 0\n     "],[1,"% block=\"ONになっている\"\n    //% weight=98   \n    export function ison(): boolean {\n        return beforetoggle\n    }\n\n    //% block=\"OFFになっている\"\n    //% weight=97"],[0,"   "],[1,"\n"],[0,"    "],[-1,"pins.digitalWritePin(dataPin, bit)\n            pins.digitalWritePin(clockPin, 1)\n            control.waitMicros(10)\n            pins.digitalWritePin(clockPin, 0)\n            data = data << "],[1,"export function isoff(): boolean {\n        return !beforetoggle\n    }\n\n    function setpin(pin: DigitalPin) {\n        switch (pin) {\n            case DigitalPin.P1:\n                buttonpin = DigitalPin.P2\n                ledpin = DigitalPin.P"],[0,"1\n  "]],"start1":1757,"start2":1757,"length1":488,"length2":594},{"diffs":[[0,"    "],[-1,"}\n\n"],[0,"        "],[-1,"// 終了シーケンス\n        pins.digitalWritePin(dataPin, 0)\n        pins.digitalWritePin(clockPin, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(clockPin, 0)"],[1,"break;\n            case DigitalPin.P0:\n                buttonpin = DigitalPin.P1\n                ledpin = DigitalPin.P0"],[0,"\n    "],[-1,"}\n\n"],[0,"    "],[-1,"function setpin(pin: DigitalPin) {\n        switch (pin) {"],[1,"        break;"],[0,"\n   "]],"start1":2353,"start2":2353,"length1":254,"length2":158},{"diffs":[[0,"ase DigitalPin.P"],[-1,"0"],[1,"2"],[0,":\n              "]],"start1":2521,"start2":2521,"length1":33,"length2":33},{"diffs":[[0,"                "],[-1,"clockP"],[1,"buttonp"],[0,"in = DigitalPin."]],"start1":2540,"start2":2540,"length1":38,"length2":39},{"diffs":[[0," = DigitalPin.P1"],[1,"2"],[0,"\n               "]],"start1":2565,"start2":2565,"length1":32,"length2":33},{"diffs":[[0,"                "],[-1,"dataP"],[1,"ledp"],[0,"in = DigitalPin."]],"start1":2583,"start2":2583,"length1":37,"length2":36},{"diffs":[[0,"n = DigitalPin.P"],[-1,"0"],[1,"2"],[0,"\n               "]],"start1":2604,"start2":2604,"length1":33,"length2":33},{"diffs":[[0,"se DigitalPin.P1"],[1,"5"],[0,":\n              "]],"start1":2659,"start2":2659,"length1":32,"length2":33},{"diffs":[[0,"                "],[-1,"clockP"],[1,"buttonp"],[0,"in = DigitalPin."]],"start1":2678,"start2":2678,"length1":38,"length2":39},{"diffs":[[0,"n = DigitalPin.P"],[-1,"2"],[1,"16"],[0,"\n               "]],"start1":2702,"start2":2702,"length1":33,"length2":34},{"diffs":[[0,"                "],[-1,"dataP"],[1,"ledp"],[0,"in = DigitalPin."]],"start1":2721,"start2":2721,"length1":37,"length2":36},{"diffs":[[0," = DigitalPin.P1"],[1,"5"],[0,"\n               "]],"start1":2743,"start2":2743,"length1":32,"length2":33},{"diffs":[[0,"    "],[1,"}\n"],[0,"    "],[-1,"case DigitalPin.P2:\n         "],[1,"}\n\n    // ボタンが押されたときのイベントハンドラ\n    //% blockId=on_button_pressed block=\"ボタンが押されたとき\"\n    //% weight=80   \n    export function onButtonPressed(handler: () => void): void {\n        control.onEvent(BUTTON_EVENT_ID, BUTTON_PRESSED, handler)\n    }\n    // ボタンがONになったときのイベントハンドラ\n    //% blockId=turn_button_on block=\"ボタンがONになったとき\"\n    //% weight=79   \n    export function turnButtonOn(handler: () => void): void {\n        control.onEvent(BUTTON_EVENT_ID, BUTTON_TURNON, handler)\n"],[0,"    "],[1,"}\n"],[0,"   "],[-1,"clockPin = DigitalPin.P12"],[1," // ボタンがOFFになったときのイベントハンドラ\n    //% blockId=turn_button_off block=\"ボタンがOFFになったとき\"\n    //% weight=78   \n    export function turnButtonOff(handler: () => void): void {\n        control.onEvent(BUTTON_EVENT_ID, BUTTON_TURNOFF, handler)"],[0,"\n    "],[1,"}\n\n"],[0,"    "],[-1,"        dataPin = DigitalPin.P2\n                break;"],[1,"basic.forever(function () {\n        /* control.inBackground(function() { */\n        if (pins.digitalReadPin(buttonpin) == BUTTON_PRESSED) {\n            if (pressstatus == false) {\n                /* 押された */\n                pressstatus = true\n            }"],[0,"\n       "],[1," }\n"],[0,"     "],[-1,"case DigitalPin.P15:\n                clockPin = DigitalPin.P16\n                dataPin = DigitalPin.P15\n                break;\n"],[1,"   else {\n            if (pressstatus == true) {\n                /* 離された */\n                pressstatus = false\n\n                if (buttonmode == ButtonMode.toggle) {\n                    if (beforetoggle == false) {\n                        beforetoggle = true;\n                        pins.digitalWritePin(ledpin, LED_ON)\n                        // ONになったときにイベントを発生\n                        control.raiseEvent(BUTTON_EVENT_ID, BUTTON_TURNON)\n                    }\n                    else {\n                        beforetoggle = false;\n                        pins.digitalWritePin(ledpin, LED_OFF)\n                        // OFFになったときにイベントを発生\n                        control.raiseEvent(BUTTON_EVENT_ID, BUTTON_TURNOFF)\n                    }\n                }\n                else {\n                    // ボタンが押されたときにイベントを発生\n                    control.raiseEvent(BUTTON_EVENT_ID, BUTTON_PRESSED)\n       "],[0,"        "],[1," "],[0,"}\n    "],[-1,"}"],[1,"        }\n        }\n        basic.pause(100)\n    })"],[0,"\n}\n"]],"start1":2788,"start2":2788,"length1":290,"length2":1975}]}]},{"timestamp":1728606284488,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"ledbar.ts","patch":[{"diffs":[[0,"\n    }\n\n"],[1,"    // LEDバーにデータを送信するための関数\n    function sendData(data: number) {\n        // スタートシーケンス\n        pins.digitalWritePin(dataPin, 0)\n        pins.digitalWritePin(clockPin, 0)\n\n        // データを1ビットずつ送信\n        for (let i = 0; i < 16; i++) {\n            let bit = (data & 0x8000) ? 1 : 0\n            pins.digitalWritePin(dataPin, bit)\n            pins.digitalWritePin(clockPin, 1)\n            control.waitMicros(10)\n            pins.digitalWritePin(clockPin, 0)\n            data = data << 1\n        }\n\n        // 終了シーケンス\n        pins.digitalWritePin(dataPin, 0)\n        pins.digitalWritePin(clockPin, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(clockPin, 0)\n    }\n"],[0,"\n    fun"]],"start1":772,"start2":772,"length1":16,"length2":690}]}]},{"timestamp":1728607442388,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"ledbar.ts","patch":[{"diffs":[[0,"の仕様）\n    }\n\n"],[1,"\n"],[0,"    function"]],"start1":768,"start2":768,"length1":24,"length2":25}]}]},{"timestamp":1728607444555,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"pe=\""],[-1,"device_button_even"],[1,"pxt-on-star"],[0,"t\" x=\""],[-1,"55"],[1,"49"],[0,"\" y=\"5"],[-1,"1"],[1,"2"],[0,"\"><"],[-1,"field name=\"NAME\">Button.A</field><"],[0,"stat"]],"start1":87,"start2":87,"length1":79,"length2":37},{"diffs":[[0,"bar_"],[-1,"SetLedBar\"><value name=\"level\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value"],[1,"setomode\"><field name=\"pin\">DigitalPin.P1</field"],[0,"></b"]],"start1":164,"start2":164,"length1":109,"length2":56},{"diffs":[[0," x=\""],[-1,"307"],[1,"265"],[0,"\" y=\""],[-1,"59"],[1,"43"],[0,"\"><f"]],"start1":278,"start2":278,"length1":18,"length2":18},{"diffs":[[0,">Button."],[-1,"B"],[1,"A"],[0,"</field>"]],"start1":312,"start2":312,"length1":17,"length2":17},{"diffs":[[0,"Lledbar_"],[-1,"S"],[1,"s"],[0,"etLedBar"]],"start1":370,"start2":370,"length1":17,"length2":17},{"diffs":[[0,"UM\">"],[-1,"0"],[1,"5"],[0,"</fi"]],"start1":450,"start2":450,"length1":9,"length2":9},{"diffs":[[0,"pe=\""],[-1,"pxt-on-start"],[1,"device_forever"],[0,"\" x=\""],[-1,"47"],[1,"191"],[0,"\" y=\"2"],[-1,"36\"><statement name=\"HANDLER\"><block type=\"IMLledbar_SetPin\"><field name=\"pin\">DigitalPin.P1</field></block></statement"],[1,"68\""],[0,"></b"]],"start1":517,"start2":517,"length1":152,"length2":39}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"{\n    IMLledbar."],[-1,"S"],[1,"s"],[0,"etLedBar(5)\n})\ni"]],"start1":44,"start2":44,"length1":33,"length2":33},{"diffs":[[0,"\n})\n"],[-1,"input.onButtonPressed(Button.B, function () {\n    "],[0,"IMLl"]],"start1":72,"start2":72,"length1":58,"length2":8},{"diffs":[[0,"bar."],[-1,"SetLedBar(0)\n})\nIMLledbar.SetPin(DigitalPin.P1"],[1,"setomode(DigitalPin.P1)\nbasic.forever(function () {\n\t\n}"],[0,")\n"]],"start1":82,"start2":82,"length1":52,"length2":61}]},{"type":"edited","filename":"ledbar.ts","patch":[{"diffs":[[0,"ion "],[-1,"SetPin"],[1,"setomode"],[0,"(pin"]],"start1":251,"start2":251,"length1":14,"length2":16},{"diffs":[[0,"unction "],[-1,"S"],[1,"s"],[0,"etLedBar"]],"start1":373,"start2":373,"length1":17,"length2":17},{"diffs":[[0,"    "],[-1,"setLedBar(level)"],[1,"// LEDバーのレベルをデータとして設定（10ビットで管理）\n        let data = 0\n        for (let i = 0; i < level; i++) {\n            data = (data << 1) | 1\n        }\n        data = data << (10 - level) // 下位10ビットを使用するために左シフト\n\n        // データをLEDバーに送信\n        sendData(0x00)        // コマンド送信\n        sendData(data)        // LEDデータ送信\n        sendData(~data)       // 反転データ（LEDバー特有の仕様）"],[0,"\n   "]],"start1":412,"start2":412,"length1":24,"length2":364},{"diffs":[[0,"  }\n"],[1,""],[0,"    }\n"],[-1,"\n    // 送信の基本シーケンス\n    function sendBits(bits: number) {\n        for (let i = 0; i < 16; i++) {\n            pins.digitalWritePin(clockPin, 0)\n            pins.digitalWritePin(dataPin, (bits & 0x8000) ? 1 : 0)\n            bits <<= 1\n            pins.digitalWritePin(clockPin, 1)\n        }\n    }\n\n    // コマンドの送信\n    function sendCommand(cmd: number) {\n        pins.digitalWritePin(dataPin, 0)\n        pins.digitalWritePin(clockPin, 0)\n        sendBits(cmd)\n        pins.digitalWritePin(dataPin, 0)\n        pins.digitalWritePin(clockPin, 0)\n        pins.digitalWritePin(clockPin, 1)\n        pins.digitalWritePin(dataPin, 1)\n    }\n\n    // LEDバーの状態設定\n    function setLedBar(level: number) {\n        let data = 0\n        for (let i = 0; i < 10; i++) {\n            data |= (i < level) ? (1 << i) : 0\n        }\n        sendCommand(0x00)\n        sendBits(data)\n        sendBits(~data)\n        pins.digitalWritePin(clockPin, 0)\n        pins.digitalWritePin(dataPin, 1)\n    }\n\n    // 単独のLEDを点灯・消灯\n    function setSingleLed(position: number, brightness: boolean) {\n        let data = 0\n        for (let i = 0; i < 10; i++) {\n            data |= (i == position) ? (brightness ? (1 << i) : 0) : 0\n        }\n        sendCommand(0x00)\n        sendBits(data)\n        sendBits(~data)\n        pins.digitalWritePin(clockPin, 0)\n        pins.digitalWritePin(dataPin, 1)\n    }\n\n"],[0,"}\n"]],"start1":1396,"start2":1396,"length1":1368,"length2":12}]}]},{"timestamp":1728607716624,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"ledbar.ts","patch":[{"diffs":[[0,"\n    }\n\n"],[1,"    function setpin(pin: DigitalPin) {\n        switch (pin) {\n            case DigitalPin.P0:\n                clockPin = DigitalPin.P1\n                dataPin = DigitalPin.P0\n                break;\n            case DigitalPin.P1:\n                clockPin = DigitalPin.P2\n                dataPin = DigitalPin.P1\n                break;\n            case DigitalPin.P2:\n                clockPin = DigitalPin.P12\n                dataPin = DigitalPin.P2\n                break;\n            case DigitalPin.P15:\n                clockPin = DigitalPin.P16\n                dataPin = DigitalPin.P15\n                break;\n        }\n    }\n\n    // 送信の基本シーケンス\n    function sendBits(bits: number) {\n        for (let i = 0; i < 16; i++) {\n            pins.digitalWritePin(clockPin, 0)\n            pins.digitalWritePin(dataPin, (bits & 0x8000) ? 1 : 0)\n            bits <<= 1\n            pins.digitalWritePin(clockPin, 1)\n        }\n    }\n\n    // コマンドの送信\n    function sendCommand(cmd: number) {\n        pins.digitalWritePin(dataPin, 0)\n        pins.digitalWritePin(clockPin, 0)\n        sendBits(cmd)\n        pins.digitalWritePin(dataPin, 0)\n        pins.digitalWritePin(clockPin, 0)\n        pins.digitalWritePin(clockPin, 1)\n        pins.digitalWritePin(dataPin, 1)\n    }\n\n    // LEDバーの状態設定\n    function setLedBar(level: number) {\n        let data = 0\n        for (let i = 0; i < 10; i++) {\n            data |= (i < level) ? (1 << i) : 0\n        }\n        sendCommand(0x00)\n        sendBits(data)\n        sendBits(~data)\n        pins.digitalWritePin(clockPin, 0)\n        pins.digitalWritePin(dataPin, 1)\n    }\n\n    // 単独のLEDを点灯・消灯\n    function setSingleLed(position: number, brightness: boolean) {\n        let data = 0\n        for (let i = 0; i < 10; i++) {\n            data |= (i == position) ? (brightness ? (1 << i) : 0) : 0\n        }\n        sendCommand(0x00)\n        sendBits(data)\n        sendBits(~data)\n        pins.digitalWritePin(clockPin, 0)\n        pins.digitalWritePin(dataPin, 1)\n    }\n"],[0,"\n}\n"]],"start1":430,"start2":430,"length1":11,"length2":1992}]}]},{"timestamp":1728609121562,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"ledbar.ts","patch":[{"diffs":[[0," }\n\n"],[-1,"    // データピンとクロックピンの設定\n    let dataPin = DigitalPin.P0\n    let clockPin = DigitalPin.P1\n    let reverse = false\n\n    // データラッチの制御\n    function latch() {\n        pins.digitalWritePin(dataPin, 0)\n        control.waitMicros(1)\n        for (let i = 0; i < 4; i++) {\n            pins.digitalWritePin(dataPin, 1)\n            pins.digitalWritePin(dataPin, 0)\n        }\n        control.waitMicros(1)\n    }\n\n    // 16ビットのデータ送信\n    function write16(data: number) {\n        for (let i = 15; i >= 0; i--) {\n            pins.digitalWritePin(dataPin, (data >> i) & 1)\n            pins.digitalWritePin(clockPin, 1)\n            pins.digitalWritePin(clockPin, 0)\n        }\n    }\n\n    // LEDバーの初期化\n    function begin() {\n        write16(0) // コマンド：8ビットモードの設定\n    }\n\n    // LEDバーの終了\n    function end() {\n        write16(0) // 余分な2つのチャンネルで208ビットシフトレジスタを埋める\n        write16(0)\n        latch()\n    }\n\n    // LEDバーの点灯レベルを設定\n    function setLevel(val: number, brightness: number = 255) {\n        begin()\n        let range = reverse ? [9, 0, -1] : [0, 10, 1]\n        for (let i = range[0]; (reverse ? i >= range[1] : i < range[1]); i += range[2]) {\n            write16(val > i ? brightness : 0)\n        }\n        end()\n    }\n\n    // 特定のビットパターンでLEDを制御\n    function setBits(val: number, brightness: number = 255) {\n        val &= 0x3FF // 下位10ビットのみを使用\n        begin()\n        let range = reverse ? [9, 0, -1] : [0, 10, 1]\n        for (let i = range[0]; (reverse ? i >= range[1] : i < range[1]); i += range[2]) {\n            write16((val >> i) & 1 ? brightness : 0)\n        }\n        end()\n    }"],[0,"\n}\n"]],"start1":434,"start2":434,"length1":1574,"length2":7}]}]},{"timestamp":1728609163098,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"252"],[1,"55"],[0,"\" y=\""],[-1,"8"],[1,"51"],[0,"\"><f"]],"start1":111,"start2":111,"length1":17,"length2":17},{"diffs":[[0,">Button."],[-1,"B"],[1,"A"],[0,"</field>"]],"start1":144,"start2":144,"length1":17,"length2":17},{"diffs":[[0,"UM\">"],[-1,"0"],[1,"5"],[0,"</fi"]],"start1":282,"start2":282,"length1":9,"length2":9},{"diffs":[[0,"ue><"],[-1,"next><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Yes</field></block></next><"],[0,"/blo"]],"start1":309,"start2":309,"length1":96,"length2":8},{"diffs":[[0,"x=\"3"],[1,"0"],[0,"7\" y=\""],[-1,"6"],[0,"5"],[1,"9"],[0,"\"><f"]],"start1":374,"start2":374,"length1":16,"length2":17},{"diffs":[[0,"e=\"NAME\">Button."],[-1,"A"],[1,"B"],[0,"</field><stateme"]],"start1":399,"start2":399,"length1":33,"length2":33},{"diffs":[[0,"UM\">"],[-1,"6"],[1,"0"],[0,"</fi"]],"start1":545,"start2":545,"length1":9,"length2":9},{"diffs":[[0,"ue><"],[-1,"next><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Heart</field></block></next><"],[0,"/blo"]],"start1":572,"start2":572,"length1":98,"length2":8},{"diffs":[[0," x=\""],[-1,"88"],[1,"47"],[0,"\" y=\"23"],[-1,"4"],[1,"6"],[0,"\"><s"]],"start1":629,"start2":629,"length1":18,"length2":18}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"Bar("],[-1,"6)\n    basic.showIcon(IconNames.Heart"],[1,"5"],[0,")\n})"]],"start1":66,"start2":66,"length1":45,"length2":9},{"diffs":[[0,"(0)\n"],[-1,"    basic.showIcon(IconNames.Yes)\n"],[0,"})\nI"]],"start1":145,"start2":145,"length1":42,"length2":8}]},{"type":"edited","filename":"ledbar.ts","patch":[{"diffs":[[0,"n.P2"],[-1,"\n    let reverse = false"],[0,"\n\n  "]],"start1":181,"start2":181,"length1":32,"length2":8},{"diffs":[[0,"   setLe"],[-1,"vel"],[1,"dBar"],[0,"(level)\n"]],"start1":411,"start2":411,"length1":19,"length2":20},{"diffs":[[0,"    "],[-1,"function setpin(pin: DigitalPin) {\n        switch (pin) {\n            case DigitalPin.P0:\n                clockPin = DigitalPin.P1\n                dataPin = DigitalPin.P0\n                break;\n            case DigitalPin.P1:\n                clockPin = DigitalPin.P2\n                dataPin = DigitalPin.P1\n                break;\n            case DigitalPin.P2:\n                clockPin = DigitalPin.P12\n                dataPin = DigitalPin.P2\n                break;\n            case DigitalPin.P15:\n                clockPin = DigitalPin.P16\n                dataPin = DigitalPin.P15\n                break;\n        }\n    }"],[1,"// データピンとクロックピンの設定\n    let dataPin = DigitalPin.P0\n    let clockPin = DigitalPin.P1\n    let reverse = false"],[0,"\n\n  "]],"start1":438,"start2":438,"length1":629,"length2":115},{"diffs":[[0,"    "],[-1,"for (let i = 0; i < 10; i++"],[1,"let range = reverse ? [9, 0, -1] : [0, 10, 1]\n        for (let i = range[0]; (reverse ? i >= range[1] : i < range[1]); i += range[2]"],[0,") {\n"]],"start1":1422,"start2":1422,"length1":35,"length2":140}]}]},{"timestamp":1728609650189,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"x=\"2"],[-1,"1"],[0,"5"],[1,"2"],[0,"\" y=\""],[-1,"-57"],[1,"8"],[0,"\"><f"]],"start1":112,"start2":112,"length1":18,"length2":16},{"diffs":[[0," x=\""],[-1,"0"],[1,"37"],[0,"\" y=\""],[-1,"0"],[1,"65"],[0,"\"><f"]],"start1":461,"start2":461,"length1":15,"length2":17},{"diffs":[[0," x=\""],[-1,"51"],[1,"88"],[0,"\" y=\""],[-1,"169"],[1,"234"],[0,"\"><s"]],"start1":806,"start2":806,"length1":18,"length2":18}]}]},{"timestamp":1728609982208,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"ledbar.ts","patch":[{"diffs":[[0,"in(clockPin, 1)\n"],[1,"            pins.digitalWritePin(clockPin, 0)\n"],[0,"        }\n    }\n"]],"start1":1559,"start2":1559,"length1":32,"length2":78}]}]},{"timestamp":1728610628538,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"ledbar.ts","patch":[{"diffs":[[0,") {\n"],[-1,"            pins.digitalWritePin(clockPin, 0)\n"],[0,"    "]],"start1":1466,"start2":1466,"length1":54,"length2":8}]}]},{"timestamp":1728610629625,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"89"],[1,"51"],[0,"\" y=\""],[-1,"29"],[1,"16"],[0,"9\"><"]],"start1":806,"start2":806,"length1":17,"length2":17}]},{"type":"edited","filename":"ledbar.ts","patch":[{"diffs":[[0,"    "],[-1,"pins.digitalWritePin(clockPin, 0)\n        control.waitMicros(5)\n        write16(0) // コマンド：8ビットモードの設定\n        pins.digitalWritePin(dataPin, 0)\n        pins.digitalWritePin(clockPin, 0)\n        pins.digitalWritePin(clockPin, 1)\n        pins.digitalWritePin(dataPin, 1)"],[1,"write16(0) // コマンド：8ビットモードの設定\n"],[0,"    "]],"start1":1682,"start2":1682,"length1":275,"length2":38},{"diffs":[[0,"n()\n"],[-1,"        pins.digitalWritePin(dataPin, 0)\n        pins.digitalWritePin(clockPin, 0)\n"],[0,"    "]],"start1":1951,"start2":1951,"length1":91,"length2":8},{"diffs":[[0,"    "],[-1,"let dat = "],[1,"write16("],[0,"val "]],"start1":2002,"start2":2002,"length1":18,"length2":16},{"diffs":[[0," : 0"],[-1,"\n            console.log(dat)\n            write16(dat"],[0,")\n  "]],"start1":2034,"start2":2034,"length1":61,"length2":8}]}]},{"timestamp":1728611078778,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"ledbar.ts","patch":[{"diffs":[[0,") {\n"],[-1,"        let state = pins.analogReadPin(clockPin)\n"],[0,"    "]],"start1":1426,"start2":1426,"length1":57,"length2":8},{"diffs":[[0,"begin()\n"],[-1,"\n"],[0,"        "]],"start1":2184,"start2":2184,"length1":17,"length2":16},{"diffs":[[0,"let "],[-1,"bi"],[1,"da"],[0,"t = "],[-1,"(i < val) ? 1 : 0\n            for (let j = 0; j < 8; j++) {\n                pins.digitalWritePin(clockPin, 0)\n                pins.digitalWritePin(dataPin, bit)\n                pins.digitalWritePin(clockPin, 1)\n            }\n        }\n        pins.digitalWritePin(clockPin, 0)\n        pins.digitalWritePin(dataPin, 1)\n        pins.digitalWritePin(clockPin, 1)\n"],[1,"val > i ? brightness : 0\n            console.log(dat)\n            write16(dat)\n        }"],[0,"\n   "]],"start1":2326,"start2":2326,"length1":374,"length2":102}]}]},{"timestamp":1728611668773,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"ledbar.ts","patch":[{"diffs":[[0,"= 0; i--) {\n"],[1,"            pins.digitalWritePin(clockPin, 0)\n"],[0,"            "]],"start1":1507,"start2":1507,"length1":24,"length2":70},{"diffs":[[0,"in, "],[-1,"state)\n            state = (state == 1) ? 0 : "],[0,"1"],[1,")"],[0,"\n   "]],"start1":1663,"start2":1663,"length1":55,"length2":10},{"diffs":[[0,"    "],[-1,"write16(0) // コマンド：8ビットモードの設定\n    }\n\n    // LEDバーの終了\n    function end() {\n        write16(0) // 余分な2つのチャンネルで208ビットシフトレジスタを埋める\n        write16(0)\n        latch()\n    }\n\n    // LEDバーの点灯レベルを設定\n    function setLevel(val: number, brightness: number = 255) {\n        begin()\n        for (let i = 0 ; i < 10 ; i++) {\n            write16(val >= i ? brightness : 0)\n        }        "],[1,"pins.digitalWritePin(clockPin, 0)\n        control.waitMicros(5)\n        write16(0) // コマンド：8ビットモードの設定\n        pins.digitalWritePin(dataPin, 0)\n        pins.digitalWritePin(clockPin, 0)\n        pins.digitalWritePin(clockPin, 1)\n        pins.digitalWritePin(dataPin, 1)    }\n\n    // LEDバーの終了\n    function end() {\n        write16(0) // 余分な2つのチャンネルで208ビットシフトレジスタを埋める\n        write16(0)\n        latch()\n    }\n\n    // LEDバーの点灯レベルを設定\n    function setLevel(val: number, brightness: number = 255) {\n        begin()\n\n        pins.digitalWritePin(dataPin, 0)\n        pins.digitalWritePin(clockPin, 0)\n        for (let i = 0; i < 10; i++) {\n            let bit = (i < val) ? 1 : 0\n            for (let j = 0; j < 8; j++) {\n                pins.digitalWritePin(clockPin, 0)\n                pins.digitalWritePin(dataPin, bit)\n                pins.digitalWritePin(clockPin, 1)\n            }\n        }\n        pins.digitalWritePin(clockPin, 0)\n        pins.digitalWritePin(dataPin, 1)\n        pins.digitalWritePin(clockPin, 1)\n\n        end()\n    }\n\n    // 特定のビットパターンでLEDを制御\n    function setBits(val: number, brightness: number = 255) {\n        val &= 0x3FF // 下位10ビットのみを使用\n        begin()\n        let range = reverse ? [9, 0, -1] : [0, 10, 1]\n        for (let i = range[0]; (reverse ? i >= range[1] : i < range[1]); i += range[2]) {\n            write16((val >> i) & 1 ? brightness : 0)\n        }"],[0,"\n   "]],"start1":1731,"start2":1731,"length1":382,"length2":1387}]}]},{"timestamp":1728612268095,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"iables><"],[1,"block type=\"device_button_event\" x=\"215\" y=\"-57\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"IMLledbar_SetLedBar\"><value name=\"level\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Yes</field></block></next></block></statement></block><block type=\"device_button_event\" x=\"0\" y=\"0\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"IMLledbar_SetLedBar\"><value name=\"level\"><shadow type=\"math_number\"><field name=\"NUM\">6</field></shadow></value><next><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Heart</field></block></next></block></statement></block><block type=\"pxt-on-start\" x=\"89\" y=\"299\"><statement name=\"HANDLER\"><block type=\"IMLledbar_SetPin\"><field name=\"pin\">DigitalPin.P1</field></block></statement></block><"],[0,"/xml>"]],"start1":71,"start2":71,"length1":13,"length2":881}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"input.onButtonPressed(Button.A, function () {\n    IMLledbar.SetLedBar(6)\n    basic.showIcon(IconNames.Heart)\n})\ninput.onButtonPressed(Button.B, function () {\n    IMLledbar.SetLedBar(0)\n    basic.showIcon(IconNames.Yes)\n})\nIMLledbar.SetPin(DigitalPin.P1)"],[0,"\n"]],"start1":0,"start2":0,"length1":1,"length2":254}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":246,"start2":246,"length1":52,"length2":8}]},{"type":"edited","filename":"ledbar.ts","patch":[{"diffs":[[0,"    "],[-1,"state = (state == 1) ? 0 : 1\n            pins.digitalWritePin(clockPin, state)"],[1,"pins.digitalWritePin(clockPin, state)\n            state = (state == 1) ? 0 : 1"],[0,"\n   "]],"start1":1586,"start2":1586,"length1":86,"length2":86},{"diffs":[[0,"16(val >"],[1,"="],[0," i ? bri"]],"start1":2061,"start2":2061,"length1":16,"length2":17}]},{"type":"added","filename":"test.ts","value":"// テストはここに来ます。このパッケージが拡張機能として使用されるときにはコンパイルされません。\n"}]}],"snapshots":[{"timestamp":1728605268709,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"ledbar\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1728607442388,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"49\" y=\"52\"><statement name=\"HANDLER\"><block type=\"IMLledbar_setomode\"><field name=\"pin\">DigitalPin.P1</field></block></statement></block><block type=\"device_button_event\" x=\"265\" y=\"43\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"IMLledbar_setLedBar\"><value name=\"level\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value></block></statement></block><block type=\"device_forever\" x=\"191\" y=\"268\"></block></xml>","main.ts":"input.onButtonPressed(Button.A, function () {\n    IMLledbar.setLedBar(5)\n})\nIMLledbar.setomode(DigitalPin.P1)\nbasic.forever(function () {\n\t\n})\n","README.md":"","ledbar.ts":"/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\" block=\"LEDバー\"\nnamespace IMLledbar {\n\n    // LEDバーの制御ピンの設定\n    let dataPin = DigitalPin.P1\n    let clockPin = DigitalPin.P2\n\n    //% block=\"ピン設定 %pin\"\n    //% weight=100   \n    export function setomode(pin: DigitalPin) {\n        setpin(pin)\n    }\n\n    //% block=\"LED表示 %level\"\n    //% weight=100   \n    export function setLedBar(level: number) {\n        // LEDバーのレベルをデータとして設定（10ビットで管理）\n        let data = 0\n        for (let i = 0; i < level; i++) {\n            data = (data << 1) | 1\n        }\n        data = data << (10 - level) // 下位10ビットを使用するために左シフト\n\n        // データをLEDバーに送信\n        sendData(0x00)        // コマンド送信\n        sendData(data)        // LEDデータ送信\n        sendData(~data)       // 反転データ（LEDバー特有の仕様）\n    }\n\n    // LEDバーにデータを送信するための関数\n    function sendData(data: number) {\n        // スタートシーケンス\n        pins.digitalWritePin(dataPin, 0)\n        pins.digitalWritePin(clockPin, 0)\n\n        // データを1ビットずつ送信\n        for (let i = 0; i < 16; i++) {\n            let bit = (data & 0x8000) ? 1 : 0\n            pins.digitalWritePin(dataPin, bit)\n            pins.digitalWritePin(clockPin, 1)\n            control.waitMicros(10)\n            pins.digitalWritePin(clockPin, 0)\n            data = data << 1\n        }\n\n        // 終了シーケンス\n        pins.digitalWritePin(dataPin, 0)\n        pins.digitalWritePin(clockPin, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(clockPin, 0)\n    }\n\n    function setpin(pin: DigitalPin) {\n        switch (pin) {\n            case DigitalPin.P0:\n                clockPin = DigitalPin.P1\n                dataPin = DigitalPin.P0\n                break;\n            case DigitalPin.P1:\n                clockPin = DigitalPin.P2\n                dataPin = DigitalPin.P1\n                break;\n            case DigitalPin.P2:\n                clockPin = DigitalPin.P12\n                dataPin = DigitalPin.P2\n                break;\n            case DigitalPin.P15:\n                clockPin = DigitalPin.P16\n                dataPin = DigitalPin.P15\n                break;\n        }\n    }\n}\n","pxt.json":"{\n    \"name\": \"ledbar\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"ledbar.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1728609245761,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_button_event\" x=\"55\" y=\"51\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"IMLledbar_SetLedBar\"><value name=\"level\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value></block></statement></block><block type=\"device_button_event\" x=\"307\" y=\"59\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"IMLledbar_SetLedBar\"><value name=\"level\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value></block></statement></block><block type=\"pxt-on-start\" x=\"47\" y=\"236\"><statement name=\"HANDLER\"><block type=\"IMLledbar_SetPin\"><field name=\"pin\">DigitalPin.P1</field></block></statement></block></xml>","main.ts":"input.onButtonPressed(Button.A, function () {\n    IMLledbar.SetLedBar(5)\n})\ninput.onButtonPressed(Button.B, function () {\n    IMLledbar.SetLedBar(0)\n})\nIMLledbar.SetPin(DigitalPin.P1)\n","README.md":"","ledbar.ts":"/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\" block=\"LEDバー\"\nnamespace IMLledbar {\n\n    // LEDバーの制御ピンの設定\n    let dataPin = DigitalPin.P1\n    let clockPin = DigitalPin.P2\n\n    //% block=\"ピン設定 %pin\"\n    //% weight=100   \n    export function SetPin(pin: DigitalPin) {\n        setpin(pin)\n    }\n\n    //% block=\"LED表示 %level\"\n    //% weight=100   \n    export function SetLedBar(level: number) {\n        setLedBar(level)\n    }\n\n    function setpin(pin: DigitalPin) {\n        switch (pin) {\n            case DigitalPin.P0:\n                clockPin = DigitalPin.P1\n                dataPin = DigitalPin.P0\n                break;\n            case DigitalPin.P1:\n                clockPin = DigitalPin.P2\n                dataPin = DigitalPin.P1\n                break;\n            case DigitalPin.P2:\n                clockPin = DigitalPin.P12\n                dataPin = DigitalPin.P2\n                break;\n            case DigitalPin.P15:\n                clockPin = DigitalPin.P16\n                dataPin = DigitalPin.P15\n                break;\n        }\n    }\n\n\n    // データラッチの制御\n    function latch() {\n        pins.digitalWritePin(dataPin, 0)\n        control.waitMicros(1)\n        for (let i = 0; i < 4; i++) {\n            pins.digitalWritePin(dataPin, 1)\n            pins.digitalWritePin(dataPin, 0)\n        }\n        control.waitMicros(1)\n    }\n\n    // 16ビットのデータ送信\n    function write16(data: number) {\n        for (let i = 15; i >= 0; i--) {\n            pins.digitalWritePin(dataPin, (data >> i) & 1)\n            pins.digitalWritePin(clockPin, 1)\n            pins.digitalWritePin(clockPin, 0)\n        }\n    }\n\n    // LEDバーの初期化\n    function begin() {\n        write16(0) // コマンド：8ビットモードの設定\n    }\n\n    // LEDバーの終了\n    function end() {\n        write16(0) // 余分な2つのチャンネルで208ビットシフトレジスタを埋める\n        write16(0)\n        latch()\n    }\n\n    // LEDバーの点灯レベルを設定\n    function setLevel(val: number, brightness: number = 255) {\n        begin()\n        let range = reverse ? [9, 0, -1] : [0, 10, 1]\n        for (let i = range[0]; (reverse ? i >= range[1] : i < range[1]); i += range[2]) {\n            write16(val > i ? brightness : 0)\n        }\n        end()\n    }\n\n    // 特定のビットパターンでLEDを制御\n    function setBits(val: number, brightness: number = 255) {\n        val &= 0x3FF // 下位10ビットのみを使用\n        begin()\n        let range = reverse ? [9, 0, -1] : [0, 10, 1]\n        for (let i = range[0]; (reverse ? i >= range[1] : i < range[1]); i += range[2]) {\n            write16((val >> i) & 1 ? brightness : 0)\n        }\n        end()\n    }\n}\n","pxt.json":"{\n    \"name\": \"ledbar\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"ledbar.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1728611078246,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_button_event\" x=\"215\" y=\"-57\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"IMLledbar_SetLedBar\"><value name=\"level\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Yes</field></block></next></block></statement></block><block type=\"device_button_event\" x=\"0\" y=\"0\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"IMLledbar_SetLedBar\"><value name=\"level\"><shadow type=\"math_number\"><field name=\"NUM\">6</field></shadow></value><next><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Heart</field></block></next></block></statement></block><block type=\"pxt-on-start\" x=\"89\" y=\"299\"><statement name=\"HANDLER\"><block type=\"IMLledbar_SetPin\"><field name=\"pin\">DigitalPin.P1</field></block></statement></block></xml>","main.ts":"input.onButtonPressed(Button.A, function () {\n    IMLledbar.SetLedBar(6)\n    basic.showIcon(IconNames.Heart)\n})\ninput.onButtonPressed(Button.B, function () {\n    IMLledbar.SetLedBar(0)\n    basic.showIcon(IconNames.Yes)\n})\nIMLledbar.SetPin(DigitalPin.P1)\n","README.md":"","ledbar.ts":"/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\" block=\"LEDバー\"\nnamespace IMLledbar {\n\n    // LEDバーの制御ピンの設定\n    let dataPin = DigitalPin.P1\n    let clockPin = DigitalPin.P2\n    let reverse = false\n\n    //% block=\"ピン設定 %pin\"\n    //% weight=100   \n    export function SetPin(pin: DigitalPin) {\n        setpin(pin)\n    }\n\n    //% block=\"LED表示 %level\"\n    //% weight=100   \n    export function SetLedBar(level: number) {\n        setLevel(level)\n    }\n\n    function setpin(pin: DigitalPin) {\n        switch (pin) {\n            case DigitalPin.P0:\n                clockPin = DigitalPin.P1\n                dataPin = DigitalPin.P0\n                break;\n            case DigitalPin.P1:\n                clockPin = DigitalPin.P2\n                dataPin = DigitalPin.P1\n                break;\n            case DigitalPin.P2:\n                clockPin = DigitalPin.P12\n                dataPin = DigitalPin.P2\n                break;\n            case DigitalPin.P15:\n                clockPin = DigitalPin.P16\n                dataPin = DigitalPin.P15\n                break;\n        }\n    }\n\n    // データラッチの制御\n    function latch() {\n        pins.digitalWritePin(dataPin, 0)\n        control.waitMicros(1)\n        for (let i = 0; i < 4; i++) {\n            pins.digitalWritePin(dataPin, 1)\n            pins.digitalWritePin(dataPin, 0)\n        }\n        control.waitMicros(1)\n    }\n\n    // 16ビットのデータ送信\n    function write16(data: number) {\n        for (let i = 15; i >= 0; i--) {\n            pins.digitalWritePin(clockPin, 0)\n            pins.digitalWritePin(dataPin, (data >> i) & 1)\n            pins.digitalWritePin(clockPin, 1)\n        }\n    }\n\n    // LEDバーの初期化\n    function begin() {\n        pins.digitalWritePin(clockPin, 0)\n        control.waitMicros(5)\n        write16(0) // コマンド：8ビットモードの設定\n        pins.digitalWritePin(dataPin, 0)\n        pins.digitalWritePin(clockPin, 0)\n        pins.digitalWritePin(clockPin, 1)\n        pins.digitalWritePin(dataPin, 1)    }\n\n    // LEDバーの終了\n    function end() {\n        write16(0) // 余分な2つのチャンネルで208ビットシフトレジスタを埋める\n        write16(0)\n        latch()\n    }\n\n    // LEDバーの点灯レベルを設定\n    function setLevel(val: number, brightness: number = 255) {\n        begin()\n        for (let i = 0; i < 10; i++) {\n            let dat = val > i ? brightness : 0\n            console.log(dat)\n            write16(dat)\n        }\n        end()\n    }\n\n    // 特定のビットパターンでLEDを制御\n    function setBits(val: number, brightness: number = 255) {\n        val &= 0x3FF // 下位10ビットのみを使用\n        begin()\n        let range = reverse ? [9, 0, -1] : [0, 10, 1]\n        for (let i = range[0]; (reverse ? i >= range[1] : i < range[1]); i += range[2]) {\n            write16((val >> i) & 1 ? brightness : 0)\n        }\n        end()\n    }\n}\n","pxt.json":"{\n    \"name\": \"ledbar\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"ledbar.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1728612510325}